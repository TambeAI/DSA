#define Max 10 
#include<iostream> 
#include<queue> 
using namespace std; 
class OBST 
{ 
 public: 
  int n,i,j,k; 
  int p[Max],q[Max],W[Max][Max],C[Max][Max],r[Max][Max]; 
     string S[Max]; 
      
 void read() 
 { 
  cout<<"\n Enter the number of keys:"; 
     cin>>n; 
     cout<<"\n Enter the keys:"; 
     for(i=1;i<=n;i++) 
     { 
      cin>>S[i]; 
     } 
      
     cout<<"\n Enter the values of successor:"; 
     for(i=1;i<=n;i++) 
     { 
      cin>>p[i]; 
     } 
      
     cout<<"\n Enter the values of unsuccessor:"; 
     for(i=0;i<=n;i++) 
     {     
      cin>>q[i]; 
     } 
 } 
  
 void display() 
 { 
  cout<<"\n The keys are:"; 
     for(i=1;i<=n;i++) 
     { 
      cout<<S[i]<<"\t"; 
     } 
     cout<<"\n The successors are:"; 
     for(i=1;i<=n;i++) 
     { 
      cout<<p[i]<<"\t"; 
     } 
     cout<<"\n The unsuccessors are:"; 
     for(i=0;i<=n;i++) 
     {     
      cout<<q[i]<<"\t"; 
     } 
 } 
  
 void create() 
 { 
  cout<<"\nFor difference 0:\n"; 
  cout<<"\nWeights\t\tCost\t\tRoot\n"; 
  for(i=0;i<=n;i++) 
  { 
   W[i][i]=q[i]; 
   C[i][i]=0; 
   r[i][i]=0; 
   cout<<W[i][i]<<"\t\t"<<C[i][i]<<"\t\t"<<r[i][i]<<endl; 
  } 
   
  cout<<"\nFor difference 1:\n"; 
  cout<<"\nWeights\t\tCost\t\tRoot\n"; 
  for(i=0;i<n;i++) 
  { 
   int j=i+1; 
   W[i][j]=p[j]+q[j]+W[i][j-1]; 
   C[i][j]=W[i][j]; 
   r[i][j]=j; 
   cout<<W[i][j]<<"\t\t"<<C[i][j]<<"\t\t"<<r[i][j]<<endl; 
  } 
   
  for(int d=2;d<=n;d++) 
  { 
   cout<<"\nFor difference "<<d<<":\n"; 
      cout<<"\nWeights\t\tCost\t\tRoot\n"; 
   for(i=0;i+d<=n;i++) 
   { 
    int j=i+d; 
    W[i][j]=p[j]+q[j]+W[i][j-1]; 
    int k=minCost(i,j); 
    C[i][j]=W[i][j]+C[i][k-1]+C[k][j]; 
    r[i][j]=k; 
    cout<<W[i][j]<<"\t\t"<<C[i][j]<<"\t\t"<<r[i][j]<<endl; 
   } 
  } 
    } 
     
    int minCost(int i,int j) 
 { 
  int min=999,h; 
  for(int k=i+1;k<=j;k++) 
  { 
   int cost=C[i][k-1]+C[k][j]; 
   if(cost<min)  
   { 
       min=cost; 
       h=k; 
   } 
  } 
  return h; 
 } 
  
 void display1() 
 { 
  queue<int>q1; 
  q1.push(0); 
  q1.push(n); 
  cout<<"\nRoot\t\tLeft child\tRight Child\n"; 
  while(!q1.empty()) 
  { 
   i=q1.front(); 
   q1.pop(); 
   j=q1.front(); 
   q1.pop(); 
   cout<<S[r[i][j]]<<"\t\t"; 
   k=r[i][j]; 
   if(r[i][k-1]==0) 
   { 
    cout<<"NULL\t\t"; 
   } 
   else 
   { 
    cout<<S[r[i][k-1]]<<"\t\t"; 
    q1.push(i); 
    q1.push(k-1); 
   } 
   if(r[k][j]==0) 
   { 
    cout<<"NULL\n"; 
   } 
   else 
   { 
    cout<<S[r[k][j]]<<"\n"; 
    q1.push(k); 
    q1.push(j); 
   } 
  }  
 } 
}; 
 
int main() 
{ 
 OBST ob; 
 ob.read(); 
 ob.create(); 
 ob.display1(); 
 return 0; 
} 
